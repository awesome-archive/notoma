# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_core.ipynb (unless otherwise specified).

__all__ = ['Config', 'notion_client', 'notion_blog_database', 'block2md', 'page2md', 'page2path', 'page_front_matter',
           'notion2md']

# Cell
from typing import List, Dict, Union
from notion.client import NotionClient
from notion.collection import *
from notion.block import *
from pathlib import Path
from dotenv import load_dotenv, find_dotenv

# Cell
class Config:
    """
    Wraps Notoma's settings in an object with easier access.
    Settings are loaded from `.env` file, and from the system environment.
    You can override them by providing kwargs when creating an instance of a config.

    `.env` keys are explicit and long, i.e. `NOTOMA_NOTION_TOKEN_V2`. `kwargs` key responsible for the token is just
    `token_v2`.
    """

    def __init__(self, **kwargs):
        """
        Loads config from a `.env` file or system environment.

        You can provide any kwargs you want and they would override environment config values.
        """
        load_dotenv(find_dotenv())
        self.__config = dict(token_v2 = os.environ.get('NOTOMA_NOTION_TOKEN_V2'),
                               blog_url = os.environ.get('NOTOMA_NOTION_BLOG_URL'))

        for k, v in kwargs.items():
            self.__config[k] = v

    @property
    def token_v2(self):
        return self.__config['token_v2']

    @property
    def blog_url(self):
        return self.__config['blog_url']

    def __getitem__(self, key):
        return self.__config[key]

    def __repr__(self):
        return '\n'.join(f'{k}: {v}' for k, v in self.__config.items())

# Cell
def notion_client(token_v2:str) -> NotionClient:
    client = NotionClient(token_v2=config.token_v2)
    return client

# Cell
def notion_blog_database(client: NotionClient, db_url:str) -> Collection:
    """Returns a Notion database, wraped into a `notion.Collection` for easy access to it's rows."""
    return client.get_collection_view(db_url).collection

# Cell
def block2md(block:Block, counter:int = 1) -> str:
    """Transforms a Notion Block into a Markdown string."""

    if isinstance(block, TextBlock):
        return block.title

    elif isinstance(block, HeaderBlock):
        return f"# {block.title}"

    elif isinstance(block, SubheaderBlock):
        return f"## {block.title}"

    elif isinstance(block, SubsubheaderBlock):
        return f"### {block.title}"

    elif isinstance(block, QuoteBlock):
        return f"> {block.title}"

    elif isinstance(block, BulletedListBlock):
        return f"- {block.title}"

    elif isinstance(block, NumberedListBlock):
        return f"{counter}. {block.title}"

    elif isinstance(block, CodeBlock):
        return f"""
```{block.language}
{block.title}
```
"""

    elif isinstance(block, CalloutBlock):
        return f"> {block.icon} {block.title}"

    elif isinstance(block, DividerBlock):
        return "\n"
    else:
        return ""

# Cell
def page2md(page:PageBlock) -> str:
    """Translates a Notion Page (`PageBlock`) into a Markdown string."""
    blocks = list()

    # Numbered lists iterator
    counter = 1

    for block in page.children:
        blocks.append(block2md(block, counter))

        if isinstance(block, NumberedListBlock):
            counter += 1
        else:
            counter = 1

    return page_front_matter(page) + "\n".join(blocks)

# Cell
def page2path(page:PageBlock, dest_dir:Path=Path(".")) -> Path:
    """Build a .md file path in `dest_dir` based on a Notion page metadata."""
    return dest_dir/Path("-".join(page.title.lower().replace(".", "").split(" "))+ ".md")

# Cell
def page_front_matter(page: PageBlock) -> str:
    """Builds a page front matter in a yaml-like format."""
    internals = ['published', 'title']
    renderables = { k:v for k,v in page.get_all_properties().items() if k not in internals }

    return f"""
---
{yaml.dump(renderables)}
---\n
"""

# Cell
def notion2md(token_v2:str, database_url:str, dest:Union[str, Path]) -> None:
    """
    Grab Notion Blog database using auth token `token_v2`,
    convert posts in database `database_url` to Markdown, and save them to `dest`.
    """

    client = notion_client(token_v2)

    database = notion_blog_database(client, database_url)

    for post in database.get_rows():
        page2path(page, dest_dir=dest).write_text(page2md(page))